---
description: This is a specification of this service. Need to refer every time. Apply this rule to the entire repository
globs: *
alwaysApply: true
---
# Next.js Development Guidelines

## Directory Structure

├── components.json
├── messages
│   ├── en.json
│   └── ja.json
├── next.config.ts
├── package-lock.json
├── package.json
├── postcss.config.mjs
├── public
│   └── images
│       ├── file.svg
├── src
│   ├── app
│   │   ├── (site)
│   │   │   ├── (authorized)
│   │   │   │   ├── (app)
│   │   │   │   │   ├── dashboard
│   │   │   │   │   │   └── page.tsx
│   │   │   │   │   └── layout.tsx
│   │   │   │   └── admin
│   │   │   │       ├── layout.tsx
│   │   │   │       ├── page.tsx
│   │   │   │       └── users
│   │   │   │           ├── [id]
│   │   │   │           │   ├── actions.ts
│   │   │   │           │   ├── edit
│   │   │   │           │   │   ├── actions.ts
│   │   │   │           │   │   └── page.tsx
│   │   │   │           │   └── page.tsx
│   │   │   │           ├── create
│   │   │   │           │   ├── actions.ts
│   │   │   │           │   └── page.tsx
│   │   │   │           └── page.tsx
│   │   │   └── (unauthorized)
│   │   │       ├── auth
│   │   │       │   ├── forgot-password
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   ├── layout.tsx
│   │   │       │   ├── reset-password
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   ├── signin
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   └── signup
│   │   │       │       ├── actions.ts
│   │   │       │       └── page.tsx
│   │   │       ├── layout.tsx
│   │   │       └── page.tsx
│   │   ├── api
│   │   │   └── auth
│   │   │       └── [...nextauth]
│   │   │           └── route.ts
│   │   ├── favicon.ico
│   │   ├── fonts
│   │   │   ├── GeistMonoVF.woff
│   │   │   └── GeistVF.woff
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── providers.tsx
│   ├── components
│   │   ├── atoms
│   │   │   ├── button.tsx
                  :
│   │   │   ├── select.tsx
│   │   │   └── skeleton.tsx
│   │   ├── molecules
│   │   │   ├── AdminPageHeader
│   │   │   │   └── index.tsx
│   │   │   ├── DataTextInputField
│   │   │   │   └── index.tsx
│   │   │   ├── Pagination
│   │   │   │   └── index.tsx
│   │   └── organisms
│   │       ├── DataTable
│   │       │   └── index.tsx
│   │       ├── Footer
│   │       │   └── index.tsx
│   │       ├── Header
│   │       │   └── index.tsx
│   │       └── SideMenu
│   │           └── index.tsx
│   ├── constants
│   │   └── auth.ts
│   ├── exceptions
│   │   ├── api_error.ts
│   │   └── auth_error.ts
│   ├── i18n
│   │   ├── request.ts
│   │   └── routing.ts
│   ├── libraries
│   │   ├── api_client.ts
│   │   ├── auth.ts
│   │   └── css.ts
│   ├── middleware.ts
│   ├── models
│   │   ├── access_token.ts
│   │   ├── status.ts
│   │   └── user.ts
│   ├── repositories
│   │   ├── auth_repository.ts
│   │   ├── base_repository.ts
│   │   └── user_repository.ts
│   ├── requests
│   │   ├── admin
│   │   │   ├── user_create_request.ts
│   │   │   └── user_update_request.ts
│   │   ├── forgot_password_request.ts
│   │   ├── reset_password_request.ts
│   │   ├── signin_request.ts
│   │   └── signup_request.ts
│   └── types
│       └── next-auth.d.ts
├── tailwind.config.ts
└── tsconfig.json

## UIコンポーネント

基本的なUIコンポーネントには、ShadCNのコンポーネントを利用する。ShadCNのコンポーネントは、`/src/components/ui`ではなく`/src/components/atoms`に格納されており、クラス名を扱う`cn`関数は、`/src/libraries/css`に用意されている。ただし、Cardは利用しないでください。

## コンポーネントの構造

コンポーネントの整理には、いわゆるAtomic Design Patternを利用しており、`/src/components/atoms`と`/src/components/molecules`、`/src/components/organisms`に、それぞれコンポーネントの粒度に応じて格納されている。


## page.tsx と コンポーネント

- 繰り返すが、page.tsxは必ずServer Side Componentとする。
- そこに埋め込まれるComponentは、必要に応じてClient Side Componentとすることが許容されるが、安易にClient Side Componentを使ってはならない
- DBや外部APIへのアクセスは、必ずpage.tsxか、page.tsx と同じディレクトリに置かれた actions.tsxにServer Side Actionとしておく。RepositoryへのClient Side Componentからの直接利用は禁止とする。
- Server Side Componentから、onClickのような関数をPropsでClient Side Componentに渡すことはできないので、それをしないように注意する
- 各Componentの操作からAPIを叩いたり、ページを更新する必要がある場合は、Server Side ActionをComponentに注入する形で行う

## Server Side Component / Client Side Component

基本的には、Server Side Componentを利用する。`page.tsx`はつねにServer Side Componentにして、Clientコンポーネントにすることを禁ずる。サーバサイドやデータアクセスはserver side actionを使って、配下のコンポーネントに渡すようにする。

## PageのPropsについて

このプロジェクトはNext 15を使っているので、Propsは`await`でうけとるようにする。

```
type Props = {
  params: Promise<{ id: string }>;
}

export default async function Page({ params }: Props) {
  let creature: Creature;
  const creature_id = (await params).id;
```

## 多言語化

多言語化には、`next-intl` を利用している。`/messages/`に言語ファイルが格納されており、デフォルトでは日本語（`ja.json`）と英語（`en.json`）を用意している。コンポーネントやページに直接文章を埋め込むことはせず、必ずこちらに記述する。

`/src/components/`以下のコンポーネントに関しては、以下のように、"Components"の中に、コンポーネント名ごとに記述する。

```
  "Components": {
    "Pagination": {
      "previous": "Previous",
      "next": "Next",
      "first": "First",
      "last": "Last",
      "no_result_found": "No results found"
    }
  }
```

# ページを追加する

Next.js 15のApp Routerを利用しているので、それに準じてページを追加する。ページの `page.tsx` はすべてServer Side Componentとする。

まず、追加するページの種類によって、追加すべき場所が以下のように異なる。

| ページの種類           | 追加場所                            |
| :--------------------- | :---------------------------------- |
| 認証不要のページ       | `src/app/(site)/(unauthorized)`     |
| 管理画面               | `src/app/(site)/(authorized)/admin` |
| 一般ユーザー向けページ | `src/app/(site)/(authorized)/(app)` |

まずはどのようなページを追加するかによって、追加する場所を決める。

## 認証不要ページの追加

認証不要ページは、`src/app/(site)/(unauthorized)`以下に配置する。認証不要ページとは、ログインや新規登録のページのほか、ランディングページ、利用規約、プライバシーポリシーなど、認証を必要としないページのことである。このページは誰でもがアクセスできる。

認証関係のページは、`src/app/(site)/(unauthorized)/auth`以下に配置する。現在では、以下のページがある

| ページの種類             | ファイルパス                                          |
| :----------------------- | :---------------------------------------------------- |
| ログインページ           | `src/app/(site)/(unauthorized)/auth/signin/`          |
| 新規登録ページ           | `src/app/(site)/(unauthorized)/auth/signup/`          |
| パスワードリセットページ | `src/app/(site)/(unauthorized)/auth/reset-password/`  |
| パスワード忘れたページ   | `src/app/(site)/(unauthorized)/auth/forgot-password/` |

認証ページとして、何かそれ以外を追加する場合は、上記のページを参考にして追加する。

## 管理画面の追加

管理画面は、`src/app/(site)/(authorized)/admin`以下に配置する。管理画面は、管理者のみがアクセスできるページである。

### CRUDページの追加

リソースのCRUDページも、`src/app/(site)/(authorized)/admin/[リソース名の複数形]`以下に配置する。リソースのCRUDページとは、リソースの一覧、詳細、新規作成、編集、削除のページのことである。例えば User リソースの場合は、`src/app/(site)/(authorized)/admin/users`以下に配置する。

| ページの種類   | ファイルパス                                                       |
| :------------- | :----------------------------------------------------------------- |
| 一覧ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/`          |
| 詳細ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/[id]`      |
| 新規作成ページ | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/create`    |
| 編集ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/[id]/edit` |

できる限りServer Side Componentを使う。APIへのアクセスはRepositoryを使って行う。例えばUserの場合はUserRepositoryを用いる。Repositoryは`repositories`ディレクトリに`repositories/user_repository.ts`のように配置されている。全てのRepositoryは`repositories/base_repository.ts`を継承している。

APIから渡されるデータは、`models`ディレクトリに`models/user.ts`のように定義されている。これは、APIから返されるデータの型を定義するためのものである。

### その他のページの追加

管理画面にCRUD以外のページを追加する場合も、`src/app/(site)/(authorized)/admin`以下に配置する。

## 一般ユーザー向けページの追加

一般ユーザー向けページは、`src/app/(site)/(authorized)/(app)`以下に配置する。一般ユーザー向けページは、一般ユーザーがアクセスできるページである。

## ページの構造

`src/app/(site)/` 以下には、`page.tsx`のみをおき、その中で表示されるコンポーネントについては、`/components/molecules`、`/components/organisms`以下に配置する。
`page.tsx`は常にサーバサイドコンポーネントとし、Repositoryを介したデータの取得は必ず`page.tsx`で行う。`/components/organisms`がClient Side Componentになる場合は、バウンダリをしっかりと意識して設計する。

### アクション

Formをクリッアクセスが必要な場合、 @actions.ts/(unauthorized)/auth/signin/actions.ts) のように、`page.tsx` と同じディレクトリの `actions.ts` にServer Side Actionとして記述をする。
